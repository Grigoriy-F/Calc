import java.util.Scanner;
import java.util.SplittableRandom;

public class CalculatorCata {
    public static void main(String[] args) throws Exception{
        /*
        Он объявлен с модификатором public, что означает, что он доступен из других классов,
        static, что позволяет вызывать метод без создания экземпляра класса, и
        void, что означает, что метод не возвращает никакого значения.
        Метод main может выбрасывать исключение типа Exception.
         */
        Scanner scanner = new Scanner(System.in); //Создание экземпляра класса Scanner для считывания ввода с клавиатуры.
        System.out.println("Введите два числа (арабских или римских): "); //Вывод строки на экран, запрашивающей пользователя ввести два числа.
        String expression = scanner.nextLine().replaceAll(" ", ""); //Считывание строки из ввода и удаление всех пробелов из нее.
        System.out.println(calc1(expression  )); //Вывод результата работы метода calc, который обрабатывает введенное выражение.
        //передаем в метод calc, где оно будет вычисляться
        //возвращаем result из метода parse и выводим на консоль
    }

    /*в данном методе мы проверяем, что данное выражение содежит только два операнда, т.е. только два числа
    и делаем это за счет деления по арифметическим знакам (+-* /). И делим данное выражение по одному из этих четырех знаков.
    Результатом деления будет массив, состоящий из двух элементов.
     */
    public static String calc1 (String input) throws Exception{
        //Объявление метода calc, который принимает на вход строку input и возвращает строку.
        // Метод может выбрасывать исключение типа Exception.
        //Объявление переменных, которые будут использоваться для хранения чисел, оператора, результата
        // указывающего, является ли ввод римскими числами.
        int num1;
        int num2;
        String oper;
        String result;
        boolean isRoman;
        /*метод split принимает регулрое выражение (\\-), потому что просто написать знаки нельзя,
        [] означает что пользователь может ввести любой из знаков, а не только + ли -.
         */
        String [] operands = input.split("[+\\-*/]");
//        Эта строка выполняет разбиение строки input на массив строк, используя в качестве разделителей символы +, -, * и /.
//        input: это (входящая строка) строка, которая содержит математическое выражение.
//  split("[+\\-*/]"): это вызов метода split(), который разбивает строку на подстроки, используя регулярное выражение в качестве разделителя.
//                Регулярное выражение "[+\\-*/]" означает следующее:
//        [...]: это класс символов, который соответствует любому символу, указанному внутри квадратных скобок.
//                +, -, *, /: это специальные символы в регулярных выражениях, которые необходимо экранировать
//        с помощью обратного слэша (\), чтобы они были восприняты как обычные символы в классе символов.
//        Таким образом, в результате выполнения этой строки получается массив operands, содержащий операнды (числа)
//        из введенного математического выражения, а символы +, -, *, / играют роль разделителей.
        /*
      После знака + стоит \\, потому что символ + в регулярных выражениях имеет специальное значение -
      он обозначает одно или несколько вхождений предыдущего элемента. Чтобы интерпретатор Java воспринял символ + как обычный символ,
      а не как часть регулярного выражения, он экранируется обратным слэшем \.
      Таким образом, \\ в данном контексте экранирует сам символ +.
      В других случаях, символы -, *, / не имеют специального значения в регулярных выражениях,
      поэтому их не нужно экранировать и просто указывается сам символ без предварительного обратного слэша.
         */

        //Разбиение введенной строки на массив операндов (чисел) с использованием регулярного выражения,
        // которое определяет разделитель как один из символов: +, -, * или /.
        //[] Это регулярное выражение, позволяет сравнить знак действия сразу с четырьмя и поделить строчку с совпавшим
        //регулярное выражение - называются шаблоны, которые используются для поиска соответствующего фрагмента текста и сопоставление символов
        //если пользователь ввел один, три или более операнда, то мы выбрасываем исключение (такое количество запрещено)
        //if(operands.length != 2) throw new Exception("Строка не является математической операцией, должно быть два операнда!");
        if(operands.length < 2) throw new Exception("Строка не является математической операцией, должно быть два операнда!");
        if(operands.length > 2) throw new Exception("Формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");

        oper = detectOperation(input); //в переменную опер сохраням знак, которой вернул метод detectOperation(то что вввели в консоли)
        //если oper был null, т.е не нужные нам знаки, то
        if(oper == null) throw new Exception("Неподдерживаемая математическая операция");
        //если оба числа римские
        //в  метод isRoman передаем первое и второе число
        if(Roman.isRoman(operands[0]) && Roman.isRoman(operands[1])){
            //конвертируем оба числа в арабские для вычесления действия
            num1 = Roman.convertToArabian(operands[0]);
            num2 = Roman.convertToArabian(operands[1]);
            //запоминаем что числа были римские
            isRoman = true;
            //если оба числа false, то идем в следующий if
        }
        //если оба числа арабские
        else if(!Roman.isRoman(operands[0]) && !Roman.isRoman(operands[1])){
            //если !Roman.isRoman(operands[0]) - не римское и второе тоже не римское, то вычисляем их как арабские
            //конвертируем числа из типа String в тип Int
            num1 = Integer.parseInt(operands[0]);
            num2 = Integer.parseInt(operands[1]);
            //запоминаем, что наши числа были не римские, а арабские
            isRoman = false;
        }
        //если одно число римское, а другое арабское
        else {
            throw new Exception("используются одновременно разные системы счисления, числа должны быть в одном формате");
        }
        if(num1 > 10 || num2 > 10){
            throw new Exception("Числа должны быть от 1 до 10");
        }
        //дальше вычисляем эти числа с нужным знаком
        int arabian = calculator(num1, num2, oper);
        //если числа были изначально римскими, то конвертируем наше число в римское
        if(isRoman) {
            //если римское число получилось меньше либо равно нулю, генерируем ошибку
            if (arabian <= 0) {
                throw new Exception("В римской системе нет отрицательных чисел");
            }
            //конвертируем результат операции из арабского в римское, и вызываем метод convertToRoman
            //полученный результат сохраняем в переменной result
            result = Roman.convertToRomann(arabian);
        }
            else{
                //конвертируем арабское число в тип String
            result = String.valueOf(arabian);
        }
        //возвращаем результат
        return result;
    }

     static String detectOperation (String expression){
        //если данная строчка содержит знак плюс, то возвращаем знак +
         //Contains(String, StringComparison). Возвращает значение, указывающее,
         // встречается ли указанная строка внутри этой строки, используя указанные правила сравнения.
        if(expression.contains("+")) return "+";
        //иначе если данная строчка содежит знак -, то возвращаем знак - .
        else if(expression.contains("-")) return "-";
        else if(expression.contains("*")) return "*";
        else if(expression.contains("/")) return "/";
        //если строчка содержит что-то другое, то возвращаем null
        else return null;
    }

    static int calculator(int a, int b, String oper) throws ArithmeticException{
        if (oper.equals("+")) {
            return a + b;
        } else if (oper.equals("-")) {
            return a - b;
        } else if (oper.equals("*")) {
            return a * b;
        } else {
            if (b == 0) {
                throw new ArithmeticException("Деление на ноль невозможно");
            }
            return a / b;
        }
    }
}

class Roman {
    //написали массив на 100 римских цифр
    //каждое римское число здесь находится под тем индексом, которое соответствует арабскому числу для этого римского числа
    //то есть массив является соответствием арабских и римских цифр
    public static String[] romanArray = new String[]{"0", "I", "II", "III", "IV", "V",
            "VI", "VII", "VIII", "IX", "X",
            "XI", "XII", "XIII", "XIV", "XV",
            "XVI", "XVII", "XVIII", "XIX", "XX",
            "XXI", "XXII", "XXIII", "XXIV", "XXV",
            "XXVI", "XXVII", "XXVIII", "XXIX", "XXX",
            "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV",
            "XXXVI", "XXXVII", "XXXVIII", "XXXIX", "XL",
            "XLI", "XLII", "XLIII", "XLIV", "XLV",
            "XLVI", "XLVII", "XLVIII", "XLIX", "L",
            "LI", "LII", "LIII", "LIV", "LV",
            "LVI", "LVII", "LVIII", "LIX", "LX",
            "LXI", "LXII", "LXIII", "LXIV", "LXV",
            "LXVI", "LXVII", "LXVIII", "LXIX", "LXX",
            "LXXI", "LXXII", "LXXIII", "LXXIV", "LXXV",
            "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX",
            "LXXXI", "LXXXII", "LXXXIII", "LXXXIV", "LXXXV",
            "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC",
            "XCI", "XCII", "XCIII", "XCIV", "XCV",
            "XCVI", "XCVII", "XCVIII", "XCIX", "C"};

    //проверяем что наше римское число является римским
    public static boolean isRoman (String val){
        //запускаем цикл по всем римским цифрам
        for(int i = 0; i <romanArray.length; i++){
            //и сравниваем наше число val с каждым римским числом из большого массива римских цифр
            if(val.equals(romanArray[i])){
                return true;
            }
        }
        //если ввели арабские, то возврашаем false и возвращаемся и проверяем второе число
        return false;
    }
    public static int convertToArabian(String roman){
        //ищем наше первое введеное число в массиве romanArray и когда найдем, берем ее индекс
        for (int i = 0; i < romanArray.length; i++) {
            //сравниваем, что наше первоее введенное число равно индексу из массива
            if(roman.equals(romanArray[i])){
                return i;
            }
        }
        //если не находит арабский эквивалент, то возвраащем (-1) - это означает что число не найдено
        return -1;
    }

    //вспомирнаем что арабское число является индексом для римского, поэтому берем наш результат вычисления и подставляем его индекс в массив
    public static String convertToRomann(int arabian){
        //и возвращаем его из метода, сохрання в переменной result
        return romanArray[arabian];
    }
}
